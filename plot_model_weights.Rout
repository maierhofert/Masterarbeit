
R version 3.3.3 (2017-03-06) -- "Another Canoe"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> library("ggplot2")
> library("mlr")
Loading required package: ParamHelpers
> library("foreign")
> # generate plots
> mytheme = theme_bw(20)
> 
> # read in learners
> source("R/create_base_learners.R")
Loading required package: proxy

Attaching package: ‘proxy’

The following objects are masked from ‘package:stats’:

    as.dist, dist

The following object is masked from ‘package:base’:

    as.matrix

Loaded dtw v1.18-1. See ?dtw for help, citation("dtw") for use in publication.

> 
> knn = c(1, 5, 9)
> nderiv = c(0, 1)
> semimet = c("Euclidean", "globMax", "amplitudeDistance", "phaseDistance")
> for(this.knn in 1:length(knn)) {
+   for(this.nderiv in 1:length(nderiv)) {
+     for(this.semimet in 1:length(semimet)) {
+       assign(paste0("knn", knn[this.knn], 
+                     "nderiv", nderiv[this.nderiv], 
+                     "_", semimet[this.semimet]),
+              makeLearner(cl = "fdaclassif.classiKnn",
+                                      id = paste0("knn", knn[this.knn], 
+                                                  "nderiv", nderiv[this.nderiv], 
+                                                  "_", semimet[this.semimet]),
+                                      metric = semimet[this.semimet],
+                                      predict.type = "prob",
+                                      par.vals = list(knn = knn[this.knn], 
+                                                      nderiv = nderiv[this.nderiv],
+                                                      metric = semimet[this.semimet])))
+     }
+   }
+ }
> 
> base.learners = list(knn1nderiv0_Euclidean, knn5nderiv0_Euclidean,
+                     knn1nderiv0_globMax, knn5nderiv0_globMax,
+                     knn1nderiv0_amplitudeDistance, knn5nderiv0_amplitudeDistance,
+                     knn1nderiv0_phaseDistance, knn5nderiv0_phaseDistance,
+                     
+                     knn1nderiv1_Euclidean, knn5nderiv1_Euclidean,
+                     knn1nderiv1_globMax, knn5nderiv1_globMax,
+                     knn1nderiv1_amplitudeDistance, knn5nderiv1_amplitudeDistance,
+                     knn1nderiv1_phaseDistance, knn5nderiv1_phaseDistance)
> base.learner.labels = c("Eucl: k = 1, a = 0", "Eucl: k = 5, a = 0",
+                          "global max: k = 1, a = 0", "global max: k = 5, a = 0",
+                          "amplitude: k = 1, a = 0", "amplitude: k = 5, a = 0",
+                          "phase: k = 1, a = 0", "phase: k = 5, a = 0",
+                          
+                          "Eucl: k = 1, a = 1", "Eucl: k = 5, a = 1",
+                          "global max: k = 1, a = 1", "global max: k = 5, a = 1",
+                          "amplitude: k = 1, a = 1", "amplitude: k = 5, a = 1",
+                          "phase: k = 1, a = 1", "phase: k = 5, a = 1")
> 
> # Ensemble learners
> # with knne Fuchs etal 2016
> nn_ensemble = makeStackedLearner(id = "knn_eucl_ensemble",
+                                        base.learners = base.learners,
+                                        predict.type = "prob",
+                                        resampling = makeResampleDesc("CV", iters = 5L),
+                                        method = "classif.bs.optimal")
> nn_ensemble$short.name = "nn ensemble"
> 
> rf_ensemble = makeStackedLearner(id = "rf_nofeat_eucl_ensemble",
+                                  base.learners = base.learners, 
+                                  super.learner = "classif.randomForest",
+                                  predict.type = "prob",
+                                  use.feat = FALSE,
+                                  method = "stack.cv")
> rf_ensemble$short.name = "rf ensemble"
> 
> source("R/growth_study_data.R")
Loading required package: splines
Loading required package: Matrix

Attaching package: ‘fda’

The following object is masked from ‘package:graphics’:

    matplot

> tsk = makeFDAClassifTask(data = growth_wide[,2:ncol(growth_wide)],
+                          id = "growth_study",
+                          fd.features = list(ff = 2:(ncol(growth_wide) - 1)),
+                          target = "sex")
> 
> 
> # # read in example task
> # dat = read.arff("Daten/TSC Problems/ECG200/ECG200.arff")
> # tsk = makeFDAClassifTask(data = dat[,1:ncol(dat)],
> #                          id = "ECG200",
> #                          fd.features = list(ff = 1:(ncol(dat) - 1)),
> #                          target = "target")
> # subs = 1:4
> # matplot(t(dat[subs,1:96]), type = "l",
> #         lty = as.numeric(dat[subs,97]),
> #         col = factor(dat[subs,97]))
> # 
> # # > rf_ensemble_mod = train(learner = rf_ensemble, task = tsk)
ArrowHead/ArrowHead.arff")
> # # only use two classes
> # dat = dat[dat$target %in% c(0, 1),]
> # dat$target = droplevels(dat$target)
> # tsk = makeFDAClassifTask(data = dat,
> #                          id = "ArrowHead",
> #                          fd.features = list(ff = 1:(ncol(dat) - 1)),
> #                          target = "target")
> 
> nn_ensemble_mod = train(learner = nn_ensemble, task = tsk)
> rf_ensemble_mod = train(learner = rf_ensemble, task = tsk)
> 
> # save models
> saveRDS(rf_ensemble_mod, "rf_ensemble_mod.RDS")
> saveRDS(nn_ensemble_mod, "nn_ensemble_mod.RDS")
> 
> # #############
> # generate data for the nn_ensemble plot
> weight = nn_ensemble_mod$learner.model$weights
> base.learners = BBmisc::extractSubList(nn_ensemble_mod$learner.model$base.models, "learner",
+                                        simplify = FALSE)
> base.learners.id = sapply(base.learners, getLearnerId)
> plot.data = data.frame(id = base.learners.id, weight = weight)
> 
> # TODO fix labels of base learners
> # barplot with the nnensemble weights
> weight.plot <- ggplot(data = plot.data, aes(x = id, y = weight)) +
+   geom_bar(stat = "identity") +
+   xlab("base model") +
+   mytheme +
+   theme(axis.text.x = element_text(angle = 90, 
+                                    # size = 8,
+                                    vjust = 0.5))
> weight.plot
> ggsave(paste0("Grafiken/weightplot_nn_ensemble.pdf"), weight.plot, 
+        width = 12, height = 10)
> 
> 
> # generate data for the rf_ensemble plot
> library("randomForest")
randomForest 4.6-12
Type rfNews() to see new features/changes/bug fixes.

Attaching package: ‘randomForest’

The following object is masked from ‘package:ggplot2’:

    margin

> randomForest_mod = rf_ensemble_mod$learner.model$super.model$learner.model
> feat_imp = importance(randomForest_mod)
> plot.data = data.frame(id = rownames(feat_imp), var_imp = as.vector(feat_imp))
> varImpPlot(randomForest_mod)
> # barplot with the nnensemble weights
> weight.plot <- ggplot(data = plot.data, aes(x = id, y = var_imp)) +
+   geom_bar(stat = "identity") +
+   xlab("base model") +
+   ylab("variable importance") +
+   mytheme +
+   theme(axis.text.x = element_text(angle = 90, 
+                                    # size = 8,
+                                    vjust = 0.5))
> weight.plot
> ggsave(paste0("Grafiken/weightplot_rf_ensemble.pdf"), weight.plot, 
+        width = 12, height = 10)
> 
> proc.time()
     user    system   elapsed 
43924.932     2.992 43952.785 
